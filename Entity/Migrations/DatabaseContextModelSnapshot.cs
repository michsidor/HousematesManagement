// <auto-generated />
using System;
using Entity.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Entities.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAddition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 28, 18, 18, 24, 291, DateTimeKind.Utc).AddTicks(8601));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("727f2251-a664-4cf4-9cb2-526e0a23fd8a"),
                            Comments = "Magda initial comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 19, 18, 24, 291, DateTimeKind.Local).AddTicks(9050),
                            Description = "Magda Description",
                            Title = "Magda title",
                            UserId = new Guid("57e468a0-ef0b-431e-9e55-88effd0a5acb")
                        },
                        new
                        {
                            Id = new Guid("831d852c-652d-4611-a966-e03ac1612578"),
                            Comments = "Mateusz initial comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 19, 18, 24, 291, DateTimeKind.Local).AddTicks(9071),
                            Description = "Mateusz Description",
                            Title = "Mateusz Title",
                            UserId = new Guid("938ad847-5da3-43c6-9bb5-16666f03e57b")
                        },
                        new
                        {
                            Id = new Guid("5b4db6c0-227f-48a8-9c13-24a3a45afe54"),
                            Comments = "Michal initial comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 19, 18, 24, 291, DateTimeKind.Local).AddTicks(9075),
                            Description = "Michal Description",
                            Title = "Michal Title",
                            UserId = new Guid("c569a646-fe5a-4628-99cb-ea5686a5788f")
                        });
                });

            modelBuilder.Entity("Entity.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Families");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32203efb-43db-4e93-a9b7-68d727494c63"),
                            Name = "Sidor"
                        },
                        new
                        {
                            Id = new Guid("1453d1eb-f3e7-4c80-9c4f-92446641dda5"),
                            Name = "Jaworscy-Sidor"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebtorsMetadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc91f056-9be6-4ac6-b655-1d0a5b161015"),
                            Amount = 100,
                            Deadline = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "John Doe",
                            UserId = new Guid("c569a646-fe5a-4628-99cb-ea5686a5788f")
                        },
                        new
                        {
                            Id = new Guid("b7fa0686-8f9a-4d74-8994-09d6f831be23"),
                            Amount = 50,
                            Deadline = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "938ad847-5da3-43c6-9bb5-16666f03e57b",
                            UserId = new Guid("57e468a0-ef0b-431e-9e55-88effd0a5acb")
                        },
                        new
                        {
                            Id = new Guid("c80323c0-997d-4105-ab88-7a989024facf"),
                            Amount = 75,
                            Deadline = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "938ad847-5da3-43c6-9bb5-16666f03e57b",
                            UserId = new Guid("57e468a0-ef0b-431e-9e55-88effd0a5acb")
                        });
                });

            modelBuilder.Entity("Entity.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAddition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 1, 28, 18, 18, 24, 291, DateTimeKind.Utc).AddTicks(5262));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00bb61a4-023b-4534-9336-981e4e779464"),
                            Comments = "Initial Magda comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 19, 18, 24, 291, DateTimeKind.Local).AddTicks(7520),
                            Description = "Task description Magda",
                            Status = false,
                            Title = "Task title Magda",
                            UserId = new Guid("57e468a0-ef0b-431e-9e55-88effd0a5acb")
                        },
                        new
                        {
                            Id = new Guid("8647d49c-acde-4e92-a921-5b6a9fa2ad00"),
                            Comments = "Initial Mateusz comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 19, 18, 24, 291, DateTimeKind.Local).AddTicks(7579),
                            Description = "Task description Mateusz",
                            Status = false,
                            Title = "Task title Mateusz",
                            UserId = new Guid("938ad847-5da3-43c6-9bb5-16666f03e57b")
                        },
                        new
                        {
                            Id = new Guid("f514554f-aaf6-40b4-b914-0a2dc63b11d3"),
                            Comments = "Initial Michal comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 19, 18, 24, 291, DateTimeKind.Local).AddTicks(7584),
                            Description = "Task description Michal",
                            Status = false,
                            Title = "Task title Michal",
                            UserId = new Guid("c569a646-fe5a-4628-99cb-ea5686a5788f")
                        });
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c569a646-fe5a-4628-99cb-ea5686a5788f"),
                            Birthday = new DateTime(2000, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michalSidor@email.com",
                            FamilyId = new Guid("32203efb-43db-4e93-a9b7-68d727494c63"),
                            Gender = 0,
                            Login = "michalSidor",
                            Name = "Michal",
                            Password = "$2a$11$CEh5KD.MiY0XtoyiE.nYXuTjDH31Uaor3W1A2JKTdeKKcM7EIUt/O",
                            SecondName = "Sidor"
                        },
                        new
                        {
                            Id = new Guid("57e468a0-ef0b-431e-9e55-88effd0a5acb"),
                            Birthday = new DateTime(1989, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magdalenaSidor@email.com",
                            FamilyId = new Guid("1453d1eb-f3e7-4c80-9c4f-92446641dda5"),
                            Gender = 1,
                            Login = "magdalenaSidor",
                            Name = "Magdalena",
                            Password = "$2a$11$PH1MUZcG.9vUW7SWlKWmGuS7bwWP5SnaL1tHORYkPTNohf6WdKEyC",
                            SecondName = "Jaworska-Sidor"
                        },
                        new
                        {
                            Id = new Guid("938ad847-5da3-43c6-9bb5-16666f03e57b"),
                            Birthday = new DateTime(1985, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateuszJaworski@email.com",
                            FamilyId = new Guid("1453d1eb-f3e7-4c80-9c4f-92446641dda5"),
                            Gender = 0,
                            Login = "mateuszJaworski",
                            Name = "Mateusz",
                            Password = "$2a$11$A14W4IRiuLM7JOIgpEOrDeZ3sLPXlCZyh1OH930MuK0P2GmQ3hX7G",
                            SecondName = "Jaworski-Sidor"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Advertisement", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.Payment", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.Task", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.HasOne("Entity.Entities.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Payments");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
