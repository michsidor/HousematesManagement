// <auto-generated />
using System;
using Entity.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230128145936_AddedSeedData")]
    partial class AddedSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Entities.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAddition")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1601a68-0e11-4dee-9c23-d9c6c0532a56"),
                            Comments = "Magda initial comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 15, 59, 36, 637, DateTimeKind.Local).AddTicks(4812),
                            Description = "Magda Description",
                            Title = "Magda title",
                            UserId = new Guid("b6d26b53-8b0c-40a9-8e03-e20b614cd02d")
                        },
                        new
                        {
                            Id = new Guid("27f92fcb-cb28-4176-b812-5ddfd29a8eed"),
                            Comments = "Mateusz initial comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 15, 59, 36, 637, DateTimeKind.Local).AddTicks(4825),
                            Description = "Mateusz Description",
                            Title = "Mateusz Title",
                            UserId = new Guid("ca6fa9db-c751-42b0-89fe-fbeb23d26634")
                        },
                        new
                        {
                            Id = new Guid("91008caf-9e57-4db4-80ea-7016ab6f7777"),
                            Comments = "Michal initial comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 15, 59, 36, 637, DateTimeKind.Local).AddTicks(4831),
                            Description = "Michal Description",
                            Title = "Michal Title",
                            UserId = new Guid("ca01f38f-1290-44b6-b896-96cd9d3026a5")
                        });
                });

            modelBuilder.Entity("Entity.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Families");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d240afd8-2e5d-42de-a247-5c3f67ae30eb"),
                            Name = "Sidor"
                        },
                        new
                        {
                            Id = new Guid("4e145c2e-5f61-4bad-ab24-7905e9c9ffce"),
                            Name = "Jaworscy-Sidor"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebtorsMetadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9eadea5-6d83-4036-9d6d-a70287cc6fa6"),
                            Amount = 100,
                            Deadline = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "John Doe",
                            UserId = new Guid("ca01f38f-1290-44b6-b896-96cd9d3026a5")
                        },
                        new
                        {
                            Id = new Guid("4f8de958-2efa-4f29-8b6e-f838635e09a3"),
                            Amount = 50,
                            Deadline = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "ca6fa9db-c751-42b0-89fe-fbeb23d26634",
                            UserId = new Guid("b6d26b53-8b0c-40a9-8e03-e20b614cd02d")
                        },
                        new
                        {
                            Id = new Guid("6536d37e-28df-49f8-82dc-08dd24c6d0df"),
                            Amount = 75,
                            Deadline = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "ca6fa9db-c751-42b0-89fe-fbeb23d26634",
                            UserId = new Guid("b6d26b53-8b0c-40a9-8e03-e20b614cd02d")
                        });
                });

            modelBuilder.Entity("Entity.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAddition")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e1e2830-a8af-45d8-b3bc-f959a3a2c0ff"),
                            Comments = "Initial Magda comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 15, 59, 36, 637, DateTimeKind.Local).AddTicks(4473),
                            Description = "Task description Magda",
                            Status = false,
                            Title = "Task title Magda",
                            UserId = new Guid("b6d26b53-8b0c-40a9-8e03-e20b614cd02d")
                        },
                        new
                        {
                            Id = new Guid("c4eb3fdc-c794-4c22-af67-afd8804c8a3a"),
                            Comments = "Initial Mateusz comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 15, 59, 36, 637, DateTimeKind.Local).AddTicks(4599),
                            Description = "Task description Mateusz",
                            Status = false,
                            Title = "Task title Mateusz",
                            UserId = new Guid("ca6fa9db-c751-42b0-89fe-fbeb23d26634")
                        },
                        new
                        {
                            Id = new Guid("99e1a2ec-d6ad-4718-a728-c9580240155f"),
                            Comments = "Initial Michal comment",
                            DateOfAddition = new DateTime(2023, 1, 28, 15, 59, 36, 637, DateTimeKind.Local).AddTicks(4607),
                            Description = "Task description Michal",
                            Status = false,
                            Title = "Task title Michal",
                            UserId = new Guid("ca01f38f-1290-44b6-b896-96cd9d3026a5")
                        });
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca01f38f-1290-44b6-b896-96cd9d3026a5"),
                            Birthday = new DateTime(2000, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michalSidor@email.com",
                            FamilyId = new Guid("d240afd8-2e5d-42de-a247-5c3f67ae30eb"),
                            Gender = 0,
                            Login = "michalSidor",
                            Name = "Michal",
                            Password = "$2a$11$Ng3ERDjLUE7i7yE0DGk4cuYd37og1mchGaMXzL8b8ftgxfaaFG1ci",
                            SecondName = "Sidor"
                        },
                        new
                        {
                            Id = new Guid("b6d26b53-8b0c-40a9-8e03-e20b614cd02d"),
                            Birthday = new DateTime(1989, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magdalenaSidor@email.com",
                            FamilyId = new Guid("4e145c2e-5f61-4bad-ab24-7905e9c9ffce"),
                            Gender = 1,
                            Login = "magdalenaSidor",
                            Name = "Magdalena",
                            Password = "$2a$11$PiWaBYJLph13aS0t3vs4POB3jkAixHVMNEItOz8Ne5Both9oZMU9q",
                            SecondName = "Jaworska-Sidor"
                        },
                        new
                        {
                            Id = new Guid("ca6fa9db-c751-42b0-89fe-fbeb23d26634"),
                            Birthday = new DateTime(1985, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateuszJaworski@email.com",
                            FamilyId = new Guid("4e145c2e-5f61-4bad-ab24-7905e9c9ffce"),
                            Gender = 0,
                            Login = "mateuszJaworski",
                            Name = "Mateusz",
                            Password = "$2a$11$eSQltlK9BOY92UhK8TguZef6nplj1jzhCz3lqW6tQjTrV10e1mFFS",
                            SecondName = "Jaworski-Sidor"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Advertisement", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.Payment", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.Task", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.HasOne("Entity.Entities.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Payments");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
