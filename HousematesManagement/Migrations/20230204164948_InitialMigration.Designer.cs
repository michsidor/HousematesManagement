// <auto-generated />
using System;
using Entity.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HousemateManagement.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230204164948_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Entities.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAddition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(8205));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d25d74af-9a38-4dbb-aa3d-1d5ab0915a91"),
                            Comments = "Magda initial comment",
                            DateOfAddition = new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(8900),
                            Description = "Magda Description",
                            Title = "Magda title",
                            UserId = new Guid("b6b4511c-f371-464b-b070-3620fcf9a4fe")
                        },
                        new
                        {
                            Id = new Guid("1a285a89-c135-49f8-9a28-c30815723c38"),
                            Comments = "Mateusz initial comment",
                            DateOfAddition = new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(8928),
                            Description = "Mateusz Description",
                            Title = "Mateusz Title",
                            UserId = new Guid("56725f34-35af-4455-ac9e-79f4959a6418")
                        },
                        new
                        {
                            Id = new Guid("c5499e1a-8092-4b21-869a-192c5f84ec0e"),
                            Comments = "Michal initial comment",
                            DateOfAddition = new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(8943),
                            Description = "Michal Description",
                            Title = "Michal Title",
                            UserId = new Guid("f5ea2289-d51a-48ef-8046-8b28b18d99bf")
                        });
                });

            modelBuilder.Entity("Entity.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAddition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 2, 4, 16, 49, 47, 921, DateTimeKind.Utc).AddTicks(4177));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07b7abc9-0573-4dfc-a74f-84d909a23410"),
                            Comments = "Initial Magda comment",
                            DateOfAddition = new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(7244),
                            Description = "Task description Magda",
                            Status = false,
                            Title = "Task title Magda",
                            UserId = new Guid("b6b4511c-f371-464b-b070-3620fcf9a4fe")
                        },
                        new
                        {
                            Id = new Guid("bf7e86fc-4f15-455f-ae3e-2fd34ac0b545"),
                            Comments = "Initial Mateusz comment",
                            DateOfAddition = new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(7316),
                            Description = "Task description Mateusz",
                            Status = false,
                            Title = "Task title Mateusz",
                            UserId = new Guid("56725f34-35af-4455-ac9e-79f4959a6418")
                        },
                        new
                        {
                            Id = new Guid("a236d6fa-2dba-4b66-9fce-1414b07f8143"),
                            Comments = "Initial Michal comment",
                            DateOfAddition = new DateTime(2023, 2, 4, 17, 49, 47, 921, DateTimeKind.Local).AddTicks(7325),
                            Description = "Task description Michal",
                            Status = false,
                            Title = "Task title Michal",
                            UserId = new Guid("f5ea2289-d51a-48ef-8046-8b28b18d99bf")
                        });
                });

            modelBuilder.Entity("Entity.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Families");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dc3029d-72d3-4777-b6f1-77b4f8291432"),
                            Name = "Sidor"
                        },
                        new
                        {
                            Id = new Guid("100acc84-868a-40a3-a3d6-64ec0fa59443"),
                            Name = "Jaworscy-Sidor"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebtorsMetadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5aff18f-2b5a-4358-bf4a-68d596bc3e21"),
                            Amount = 100,
                            Deadline = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "John Doe",
                            UserId = new Guid("f5ea2289-d51a-48ef-8046-8b28b18d99bf")
                        },
                        new
                        {
                            Id = new Guid("4840fc48-68c7-4733-8959-e9c2944e88af"),
                            Amount = 50,
                            Deadline = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "56725f34-35af-4455-ac9e-79f4959a6418",
                            UserId = new Guid("b6b4511c-f371-464b-b070-3620fcf9a4fe")
                        },
                        new
                        {
                            Id = new Guid("a132b8e9-a95a-44d7-8206-b50d65b58eb1"),
                            Amount = 75,
                            Deadline = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DebtorsMetadata = "56725f34-35af-4455-ac9e-79f4959a6418",
                            UserId = new Guid("b6b4511c-f371-464b-b070-3620fcf9a4fe")
                        });
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5ea2289-d51a-48ef-8046-8b28b18d99bf"),
                            Birthday = new DateTime(2000, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michalSidor@email.com",
                            FamilyId = new Guid("9dc3029d-72d3-4777-b6f1-77b4f8291432"),
                            Gender = 0,
                            Login = "michalSidor",
                            Name = "Michal",
                            Password = "$2a$11$W3LCSKsSp82jYffMjdieueGelODw2dDrYR2EUBPY.akGILnjrul0O",
                            SecondName = "Sidor"
                        },
                        new
                        {
                            Id = new Guid("b6b4511c-f371-464b-b070-3620fcf9a4fe"),
                            Birthday = new DateTime(1989, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "magdalenaSidor@email.com",
                            FamilyId = new Guid("100acc84-868a-40a3-a3d6-64ec0fa59443"),
                            Gender = 1,
                            Login = "magdalenaSidor",
                            Name = "Magdalena",
                            Password = "$2a$11$M33Xf6gW5kxqr/92gTDlLeXMKS9/Xx.YsvghCwzSyq5cLH3090C5y",
                            SecondName = "Jaworska-Sidor"
                        },
                        new
                        {
                            Id = new Guid("56725f34-35af-4455-ac9e-79f4959a6418"),
                            Birthday = new DateTime(1985, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateuszJaworski@email.com",
                            FamilyId = new Guid("100acc84-868a-40a3-a3d6-64ec0fa59443"),
                            Gender = 0,
                            Login = "mateuszJaworski",
                            Name = "Mateusz",
                            Password = "$2a$11$0qchJcI1WEjawWk0DvZBuO7eXeWWADimDvUWzXhzZcCdV0R3nBO9a",
                            SecondName = "Jaworski-Sidor"
                        });
                });

            modelBuilder.Entity("Entity.Entities.Advertisement", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.Assignment", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Assignment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.Payment", b =>
                {
                    b.HasOne("Entity.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.HasOne("Entity.Entities.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Assignment");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
